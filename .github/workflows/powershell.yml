# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# https://github.com/microsoft/action-psscriptanalyzer
# For more information on PSScriptAnalyzer in general, see
# https://github.com/PowerShell/PSScriptAnalyzer

name: PSGalleryPublish

on:
  push:
    branches:
      - main
      - "users/wcamargo/**"
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "42 13 * * 3"
  workflow_run:
    workflows: ["PowerShellGalleryPublish"]
    types: completed

permissions:
  contents: write # for creating tags and releases

jobs:
  build:
    permissions:
      contents: write # for creating tags and releases  
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: PowerShellGalleryPublish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@6b2948b1944407914a58661c49941824d149734f
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          path: .\
          recurse: true
          # Include your own basic security rules. Removing this option will run all the rules
          includeRule: '"PSAvoidGlobalAliases", "PSAvoidUsingConvertToSecureStringWithPlainText"'
          output: results.sarif

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      # Extract version from module manifest for tagging
      - name: Get module version
        id: get_version
        shell: pwsh
        run: |
          $manifest = Import-PowerShellDataFile -Path './AzureDevOps.Tools.psd1'
          $version = $manifest.ModuleVersion
          $prerelease = $manifest.PrivateData.PSData.Prerelease
          if ($prerelease) {
            $fullVersion = "$version-$prerelease"
          } else {
            $fullVersion = $version
          }
          echo "version=$fullVersion" >> $env:GITHUB_OUTPUT
          echo "Module version: $fullVersion"

      # Create git tag
      - name: Create git tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if tag already exists
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.version }} already exists, skipping tag creation"
          else
            git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release version ${{ steps.get_version.outputs.version }}"
            git push origin "v${{ steps.get_version.outputs.version }}"
            echo "Created and pushed tag v${{ steps.get_version.outputs.version }}"
          fi

      - name: Publish to powershell gallery
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        shell: pwsh
        run: |
          Publish-Module -Path './' -NuGetApiKey ${{ secrets.POWERSHELL_GALLERY_API_KEY }}

      # Create GitHub release
      - name: Create GitHub release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if release already exists
          if gh release view "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Release v${{ steps.get_version.outputs.version }} already exists, skipping release creation"
          else
            gh release create "v${{ steps.get_version.outputs.version }}" \
              --title "Release v${{ steps.get_version.outputs.version }}" \
              --notes "Release of AzureDevOps.Tools PowerShell module version ${{ steps.get_version.outputs.version }}

            ## Changes
            - Published to PowerShell Gallery

            ## Installation
            \`\`\`powershell
            Install-Module -Name AzureDevOps.Tools -Force
            \`\`\`" \
              ${{ contains(steps.get_version.outputs.version, '-') && '--prerelease' || '' }}
            echo "Created release v${{ steps.get_version.outputs.version }}"
          fi
